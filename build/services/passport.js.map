{"version":3,"sources":["../../src/services/passport.js"],"names":["User","model","GoogleStrategy","Strategy","serializeUser","user","done","id","deserializeUser","findById","then","passportConfig","use","clientID","googleClientID","clientSecret","googleClientSecret","callbackURL","proxy","accessToken","refreshToken","profile","findOne","googleId","existingUser","save","newUser"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,OAAO,mBAASC,KAAT,CAAe,OAAf,CAAb;;AAEA,IAAMC,iBAAiB,8BAAeC,QAAtC;;AAEA,mBAASC,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACrCA,OAAK,IAAL,EAAWD,KAAKE,EAAhB;AACD,CAFD;;AAIA,mBAASC,eAAT,CAAyB,UAACD,EAAD,EAAKD,IAAL,EAAc;AACrCN,OAAKS,QAAL,CAAcF,EAAd,EAAkBG,IAAlB,CAAuB,UAACL,IAAD,EAAU;AAC/BC,SAAK,IAAL,EAAWD,IAAX;AACD,GAFD;AAGD,CAJD;;AAMA,IAAMM,iBAAiB,mBAASC,GAAT,CACrB,IAAIV,cAAJ,CACE;AACEW,YAAU,eAAKC,cADjB;AAEEC,gBAAc,eAAKC,kBAFrB;AAGEC,eAAa,uBAHf;AAIEC,SAAO;AAJT,CADF,EAOE,UAACC,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCf,IAArC,EAA8C;AAC5CN,OAAKsB,OAAL,CAAa,EAAEC,UAAUF,QAAQd,EAApB,EAAb,EAAuCG,IAAvC,CAA4C,UAACc,YAAD,EAAkB;AAC5D,QAAIA,YAAJ,EAAkB;AAChBlB,WAAK,IAAL,EAAWkB,YAAX;AACD,KAFD,MAEO;AACL,UAAIxB,IAAJ,CAAS,EAAEuB,UAAUF,QAAQd,EAApB,EAAT,EACGkB,IADH,GAEGf,IAFH,CAEQ,UAACgB,OAAD;AAAA,eAAapB,KAAK,IAAL,EAAWoB,OAAX,CAAb;AAAA,OAFR;AAGD;AACF,GARD;AASD,CAjBH,CADqB,CAAvB;;kBAsBef,c","file":"passport.js","sourcesContent":["import passport from 'passport';\nimport googlePassport from 'passport-google-oauth20';\nimport mongoose from 'mongoose';\n\nimport keys from '../config/keys';\n\nconst User = mongoose.model('users');\n\nconst GoogleStrategy = googlePassport.Strategy;\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findById(id).then((user) => {\n    done(null, user);\n  });\n});\n\nconst passportConfig = passport.use(\n  new GoogleStrategy(\n    {\n      clientID: keys.googleClientID,\n      clientSecret: keys.googleClientSecret,\n      callbackURL: '/auth/google/callback',\n      proxy: true\n    },\n    (accessToken, refreshToken, profile, done) => {\n      User.findOne({ googleId: profile.id }).then((existingUser) => {\n        if (existingUser) {\n          done(null, existingUser);\n        } else {\n          new User({ googleId: profile.id })\n            .save()\n            .then((newUser) => done(null, newUser));\n        }\n      });\n    }\n  )\n);\n\nexport default passportConfig;\n"]}